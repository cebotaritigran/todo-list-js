(()=>{"use strict";function e(e){const t=new class{constructor(e,t=[]){this.title=e,this.projectTodoList=t}}(e);return t}let t=[];let n=[];!function(){const e=document.querySelector(".content"),n=document.createElement("node");document.querySelector(".todo-tab").addEventListener("click",(()=>{n.innerHTML='<div class="main-todo-list">\n        <div class="form-container">\n            <form autocomplete="off" class="form">\n                <input id="title" type="text" placeholder="Title" minlength="3" maxlength="40" required>\n                <input id="description" type="text" placeholder="description" minlength="3" required>\n                <input id="date" type="date" placeholder="date" required>\n                <button class="book-add-button" type="submit">Submit</button>\n            </form>\n        </div>\n        <div class="todos"></div>';const o=document.querySelector(".todos");if(t.length>0)for(let e=0;e<t.length;e++)o.innerHTML+=`<p>${t[e].title}</p>`,o.innerHTML+=`<p>${t[e].description}</p>`,o.innerHTML+=`<p>${t[e].date}</p>`;e.appendChild(n),document.querySelector(".form").addEventListener("submit",(e=>{!function(e){const n=document.querySelector("#title").value,o=document.querySelector("#description").value,c=document.querySelector("#date").value;t.push(function(e,t,n){const o=new class{constructor(e,t,n){this.title=e,this.description=t,this.date=n}}(e,t,n);return o}(n,o,c));const d=document.createTextNode(t[t.length-1].title),r=document.createTextNode(t[t.length-1].description),i=document.createTextNode(t[t.length-1].date),l=document.createElement("p"),u=document.createElement("p"),s=document.createElement("p");l.appendChild(d),u.appendChild(r),s.appendChild(i),document.querySelector(".todos").append(l,u,s),e.preventDefault()}(e)}))}))}(),e(),document.querySelector(".project").addEventListener("submit",(t=>{!function(t){const o=document.querySelector("#project").value;n.push(e(o)),document.createTextNode(n[n.length-1].title),document.querySelector(".projects").innerHTML+=`<div>${n[n.length-1].title}</div>`,t.preventDefault()}(t)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,