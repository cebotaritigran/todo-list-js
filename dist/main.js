(()=>{"use strict";let e=[];!function(){const t=document.querySelector(".content"),n=document.createElement("node");document.querySelector(".todo-tab").addEventListener("click",(()=>{n.innerHTML='<div class="main-todo-list">\n        <div class="form-container">\n            <form autocomplete="off" class="form">\n                <input id="title" type="text" placeholder="Title" minlength="3" maxlength="40" required>\n                <input id="description" type="text" placeholder="description" minlength="3" required>\n                <input id="date" type="date" placeholder="date" required>\n                <button class="book-add-button" type="submit">Submit</button>\n            </form>\n        </div>\n        <div class="todos"></div>';const o=document.querySelector(".todos");if(e.length>0)for(let t=0;t<e.length;t++)o.innerHTML+=`<p>${e[t].title}</p>`,o.innerHTML+=`<p>${e[t].description}</p>`,o.innerHTML+=`<p>${e[t].date}</p>`;t.appendChild(n),document.querySelector(".form").addEventListener("submit",(t=>{!function(t){const n=document.querySelector("#title").value,o=document.querySelector("#description").value,d=document.querySelector("#date").value;e.push(function(e,t,n){const o=new class{constructor(e,t,n){this.title=e,this.description=t,this.date=n}}(e,t,n);return o}(n,o,d));const c=document.createTextNode(e[e.length-1].title),i=document.createTextNode(e[e.length-1].description),r=document.createTextNode(e[e.length-1].date),l=document.createElement("p"),u=document.createElement("p"),a=document.createElement("p");l.appendChild(c),u.appendChild(i),a.appendChild(r),document.querySelector(".todos").append(l,u,a),t.preventDefault()}(t)}))}))}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsIm1hcHBpbmdzIjoibUJBRU8sSUFBSUEsRUFBTyxJQ0NYLFdBRUgsTUFBTUMsRUFBVUMsU0FBU0MsY0FBYyxZQUVqQ0MsRUFBZUYsU0FBU0csY0FBYyxRQUV4QkgsU0FBU0MsY0FBYyxhQUUvQkcsaUJBQWlCLFNBQVMsS0FDbENGLEVBQWFHLFVBQVksNGlCQVd6QixNQUFNQyxFQUFnQk4sU0FBU0MsY0FBYyxVQUM3QyxHQUFHSCxFQUFLUyxPQUFTLEVBQ2IsSUFBSSxJQUFJQyxFQUFJLEVBQUdBLEVBQUlWLEVBQUtTLE9BQVFDLElBQzVCRixFQUFjRCxXQUFhLE1BQU1QLEVBQUtVLEdBQVUsWUFDaERGLEVBQWNELFdBQWEsTUFBTVAsRUFBS1UsR0FBZ0Isa0JBQ3RERixFQUFjRCxXQUFhLE1BQU1QLEVBQUtVLEdBQVMsV0FHdkRULEVBQVFVLFlBQVlQLEdETExGLFNBQVNDLGNBQWMsU0FDL0JHLGlCQUFpQixVQUFXTSxLQXZCM0MsU0FBaUJBLEdBQ2IsTUFBTUMsRUFBUVgsU0FBU0MsY0FBYyxVQUFVVyxNQUN6Q0MsRUFBY2IsU0FBU0MsY0FBYyxnQkFBZ0JXLE1BQ3JERSxFQUFPZCxTQUFTQyxjQUFjLFNBQVNXLE1BQzdDZCxFQUFLaUIsS0VQRixTQUFpQkosRUFBT0UsRUFBYUMsR0FTeEMsTUFBTUUsRUFBTyxJQVBiLE1BQ0lDLFlBQVlOLEVBQU9FLEVBQWFDLEdBQzVCSSxLQUFLUCxNQUFRQSxFQUNiTyxLQUFLTCxZQUFjQSxFQUNuQkssS0FBS0osS0FBT0EsQ0FDaEIsR0FFa0JILEVBQU9FLEVBQWFDLEdBRTFDLE9BQU9FLENBQ1gsQ0ZMY0csQ0FBUVIsRUFBT0UsRUFBYUMsSUFFdEMsTUFBTU0sRUFBWXBCLFNBQVNxQixlQUFldkIsRUFBS0EsRUFBS1MsT0FBTyxHQUFVLE9BQy9EZSxFQUFrQnRCLFNBQVNxQixlQUFldkIsRUFBS0EsRUFBS1MsT0FBTyxHQUFnQixhQUMzRWdCLEVBQVd2QixTQUFTcUIsZUFBZXZCLEVBQUtBLEVBQUtTLE9BQU8sR0FBUyxNQUM3RGlCLEVBQVl4QixTQUFTRyxjQUFjLEtBQ25Dc0IsRUFBa0J6QixTQUFTRyxjQUFjLEtBQ3pDdUIsRUFBVzFCLFNBQVNHLGNBQWMsS0FDeENxQixFQUFVZixZQUFZVyxHQUN0QkssRUFBZ0JoQixZQUFZYSxHQUM1QkksRUFBU2pCLFlBQVljLEdBQ1R2QixTQUFTQyxjQUFjLFVBQy9CMEIsT0FBT0gsRUFBV0MsRUFBaUJDLEdBQ3ZDaEIsRUFBRWtCLGdCQUNOLENBTVFDLENBQVFuQixFQUFFLEdDSUYsR0FFaEIsQ0VoQ0FvQixFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL1VJLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9Ub2RvTGlzdFRhYi5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvVG9kby5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0VG9kbyB9IGZyb20gXCIuL1RvZG9cIjtcbi8vIGxpc3Qgb2YgdG9kb3NcbmV4cG9ydCBsZXQgbGlzdCA9IFtdO1xuXG5mdW5jdGlvbiBhZGRUb2RvKGUpIHtcbiAgICBjb25zdCB0aXRsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN0aXRsZScpLnZhbHVlO1xuICAgIGNvbnN0IGRlc2NyaXB0aW9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2Rlc2NyaXB0aW9uJykudmFsdWU7XG4gICAgY29uc3QgZGF0ZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNkYXRlJykudmFsdWU7XG4gICAgbGlzdC5wdXNoKGdldFRvZG8odGl0bGUsIGRlc2NyaXB0aW9uLCBkYXRlKSk7XG4gICAgLy8gYWRkaW5nIG5ldyB0b2RvIGF0IHRoZSBlbmQgb2YgdGhlIHJvd1xuICAgIGNvbnN0IHRpdGxlVG9kbyA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGxpc3RbbGlzdC5sZW5ndGgtMV1bXCJ0aXRsZVwiXSk7XG4gICAgY29uc3QgZGVzY3JpcHRpb25Ub2RvID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUobGlzdFtsaXN0Lmxlbmd0aC0xXVtcImRlc2NyaXB0aW9uXCJdKTtcbiAgICBjb25zdCBkYXRlVG9kbyA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGxpc3RbbGlzdC5sZW5ndGgtMV1bXCJkYXRlXCJdKTtcbiAgICBjb25zdCBub2RlVGl0bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG4gICAgY29uc3Qgbm9kZURlc2NyaXB0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICAgIGNvbnN0IG5vZGVEYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICAgIG5vZGVUaXRsZS5hcHBlbmRDaGlsZCh0aXRsZVRvZG8pO1xuICAgIG5vZGVEZXNjcmlwdGlvbi5hcHBlbmRDaGlsZChkZXNjcmlwdGlvblRvZG8pO1xuICAgIG5vZGVEYXRlLmFwcGVuZENoaWxkKGRhdGVUb2RvKTtcbiAgICBjb25zdCBkaXYgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudG9kb3MnKTtcbiAgICBkaXYuYXBwZW5kKG5vZGVUaXRsZSwgbm9kZURlc2NyaXB0aW9uLCBub2RlRGF0ZSk7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xufVxuXG4vLyBvbiBzdWJtaXQgYWRkIHRvZG8gdG8gdGhlIHRvZG9zIGRpdlxuZXhwb3J0IGZ1bmN0aW9uIHVpVG9kbygpIHtcbiAgICBjb25zdCBzdWJtaXRUb2RvID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmZvcm0nKTtcbiAgICBzdWJtaXRUb2RvLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIChlKSA9PiB7XG4gICAgICAgIGFkZFRvZG8oZSk7XG4gICAgfSk7XG59XG5cbi8vIGZ1bmN0aW9uIGFkZFByb2plY3QoZSkge1xuLy8gICAgIGNvbnN0IHByb2plY3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjcHJvamVjdCcpLnZhbHVlO1xuLy8gICAgIGxldCBsaXN0ID0gW107XG4vLyAgICAgbGlzdC5wdXNoKHByb2plY3QpO1xuLy8gICAgIGNvbnN0IHByb2plY3RUaXRsZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGxpc3RbMF0pO1xuLy8gICAgIGNvbnN0IG5vZGVQcm9qZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuXG4vLyAgICAgbm9kZVByb2plY3QuYXBwZW5kQ2hpbGQocHJvamVjdFRpdGxlKTtcbi8vICAgICBjb25zdCBkaXYgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucmVzdWx0Jyk7XG4vLyAgICAgZGl2LmFwcGVuZENoaWxkKG5vZGVQcm9qZWN0KTtcbi8vICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4vLyB9XG5cbi8vIGV4cG9ydCBmdW5jdGlvbiB1aVByb2plY3QoKSB7XG4vLyAgICAgY29uc3Qgc3VibWl0UHJvamVjdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcm9qZWN0Jyk7XG4vLyAgICAgc3VibWl0UHJvamVjdC5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCAoZSkgPT4ge1xuLy8gICAgICAgICBhZGRQcm9qZWN0KGUpO1xuLy8gICAgIH0pO1xuLy8gfSIsImltcG9ydCB7IGxpc3QsIHVpVG9kbyB9IGZyb20gXCIuL1VJXCI7XG5cbi8vIGRpc3BsYXlzIGZvcm0gYW5kIHRvZG9zIG9uIGNsaWNrXG5leHBvcnQgZnVuY3Rpb24gZGlzcGxheVRvZG9MaXN0KCkge1xuXG4gICAgY29uc3QgY29udGVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jb250ZW50Jyk7XG4gICAgLy8gdGhlIG5vZGUgdGhhdCB3ZSBhcmUgZ29pbmcgdG8gYXR0YWNoIHRvIGNvbnRlbnQgZGl2XG4gICAgY29uc3QgbWFpblRvZG9MaXN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbm9kZScpO1xuICAgIC8vIHRvZG8gbmF2YmFyIHRleHQgdGhhdCB3ZSBhcmUgZ29pbmcgdG8gY2xpY2tcbiAgICBjb25zdCB0b2RvTGlzdFRhYiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50b2RvLXRhYicpO1xuXG4gICAgdG9kb0xpc3RUYWIuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgIG1haW5Ub2RvTGlzdC5pbm5lckhUTUwgPSBgPGRpdiBjbGFzcz1cIm1haW4tdG9kby1saXN0XCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWNvbnRhaW5lclwiPlxuICAgICAgICAgICAgPGZvcm0gYXV0b2NvbXBsZXRlPVwib2ZmXCIgY2xhc3M9XCJmb3JtXCI+XG4gICAgICAgICAgICAgICAgPGlucHV0IGlkPVwidGl0bGVcIiB0eXBlPVwidGV4dFwiIHBsYWNlaG9sZGVyPVwiVGl0bGVcIiBtaW5sZW5ndGg9XCIzXCIgbWF4bGVuZ3RoPVwiNDBcIiByZXF1aXJlZD5cbiAgICAgICAgICAgICAgICA8aW5wdXQgaWQ9XCJkZXNjcmlwdGlvblwiIHR5cGU9XCJ0ZXh0XCIgcGxhY2Vob2xkZXI9XCJkZXNjcmlwdGlvblwiIG1pbmxlbmd0aD1cIjNcIiByZXF1aXJlZD5cbiAgICAgICAgICAgICAgICA8aW5wdXQgaWQ9XCJkYXRlXCIgdHlwZT1cImRhdGVcIiBwbGFjZWhvbGRlcj1cImRhdGVcIiByZXF1aXJlZD5cbiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYm9vay1hZGQtYnV0dG9uXCIgdHlwZT1cInN1Ym1pdFwiPlN1Ym1pdDwvYnV0dG9uPlxuICAgICAgICAgICAgPC9mb3JtPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInRvZG9zXCI+PC9kaXY+YFxuICAgICAgICAvLyBpZiB0aGVyZSBhcmUgYW55IHRvZG9zIGFscmVhZHkgd2UgaGF2ZSB0byBkaXNwbGF5IHRoZW1cbiAgICAgICAgY29uc3QgZXhpc3RpbmdUb2RvcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50b2RvcycpO1xuICAgICAgICBpZihsaXN0Lmxlbmd0aCA+IDApe1xuICAgICAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgICAgIGV4aXN0aW5nVG9kb3MuaW5uZXJIVE1MICs9IGA8cD4ke2xpc3RbaV1bXCJ0aXRsZVwiXX08L3A+YFxuICAgICAgICAgICAgICAgIGV4aXN0aW5nVG9kb3MuaW5uZXJIVE1MICs9IGA8cD4ke2xpc3RbaV1bXCJkZXNjcmlwdGlvblwiXX08L3A+YFxuICAgICAgICAgICAgICAgIGV4aXN0aW5nVG9kb3MuaW5uZXJIVE1MICs9IGA8cD4ke2xpc3RbaV1bXCJkYXRlXCJdfTwvcD5gXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29udGVudC5hcHBlbmRDaGlsZChtYWluVG9kb0xpc3QpO1xuICAgICAgICB1aVRvZG8oKTtcbiAgICB9KTtcbn0iLCIvLyBleHBlY3RzIHRpdGxlIGRlc2NyaXB0aW9uIGFuZCBkYXRlIHRoZSB0b2RvIG11c3QgYmUgZG9uZSBhbmQgcGFzc2VzIHRoZW0gb24gVG9kbyBjbGFzc1xuZXhwb3J0IGZ1bmN0aW9uIGdldFRvZG8odGl0bGUsIGRlc2NyaXB0aW9uLCBkYXRlKSB7XG4gICAgLy9jbGFzcyByZXR1cm5zIG5ldyB0b2RvIG9iamVjdFxuICAgIGNsYXNzIFRvZG8ge1xuICAgICAgICBjb25zdHJ1Y3Rvcih0aXRsZSwgZGVzY3JpcHRpb24sIGRhdGUpIHtcbiAgICAgICAgICAgIHRoaXMudGl0bGUgPSB0aXRsZVxuICAgICAgICAgICAgdGhpcy5kZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uXG4gICAgICAgICAgICB0aGlzLmRhdGUgPSBkYXRlXG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgdG9kbyA9IG5ldyBUb2RvKHRpdGxlLCBkZXNjcmlwdGlvbiwgZGF0ZSk7XG4gICAgLy8gcmV0dXJuaW5nIG5ldyB0b2RvIG9iamVjdFxuICAgIHJldHVybiB0b2RvO1xufVxuIiwiaW1wb3J0IHsgZGlzcGxheVRvZG9MaXN0IH0gZnJvbSBcIi4vVG9kb0xpc3RUYWJcIjtcbi8vIGNhbGxpbmcgZnVuY3Rpb24gdG8gZGlzcGxheSB0aGUgZm9ybSBhbmQgdGhlIHRvZG8gbHNpdCBvbiBjbGlja1xuZGlzcGxheVRvZG9MaXN0KCk7XG5cblxuIl0sIm5hbWVzIjpbImxpc3QiLCJjb250ZW50IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwibWFpblRvZG9MaXN0IiwiY3JlYXRlRWxlbWVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJpbm5lckhUTUwiLCJleGlzdGluZ1RvZG9zIiwibGVuZ3RoIiwiaSIsImFwcGVuZENoaWxkIiwiZSIsInRpdGxlIiwidmFsdWUiLCJkZXNjcmlwdGlvbiIsImRhdGUiLCJwdXNoIiwidG9kbyIsImNvbnN0cnVjdG9yIiwidGhpcyIsImdldFRvZG8iLCJ0aXRsZVRvZG8iLCJjcmVhdGVUZXh0Tm9kZSIsImRlc2NyaXB0aW9uVG9kbyIsImRhdGVUb2RvIiwibm9kZVRpdGxlIiwibm9kZURlc2NyaXB0aW9uIiwibm9kZURhdGUiLCJhcHBlbmQiLCJwcmV2ZW50RGVmYXVsdCIsImFkZFRvZG8iLCJkaXNwbGF5VG9kb0xpc3QiXSwic291cmNlUm9vdCI6IiJ9