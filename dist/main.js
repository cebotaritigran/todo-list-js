(()=>{"use strict";function e(e,t,n){const o=new class{constructor(e,t,n){this.title=e,this.description=t,this.date=n}}(e,t,n);return o}let t=[];let n=[],o=[];function l(t){document.querySelector(".form").addEventListener("submit",(n=>{!function(t,n){const l=document.querySelector("#title").value,r=document.querySelector("#description").value,c=document.querySelector("#date").value;let d;o[n].push(e(l,r,c)),d=o[n];const i=document.createTextNode(d[d.length-1].title),u=document.createTextNode(d[d.length-1].description),s=document.createTextNode(d[d.length-1].date),a=document.createElement("p"),p=document.createElement("p"),m=document.createElement("p");a.appendChild(i),p.appendChild(u),m.appendChild(s);const v=document.querySelector(".todos"),b=document.createElement("div");b.setAttribute("class","todo-box"),b.setAttribute("id",d.length-1),b.setAttribute("value",d.length-1);const h=document.createElement("button");h.textContent="Remove",h.setAttribute("class","remove-button"),h.setAttribute("value",d.length-1),h.addEventListener("click",(()=>{for(let e=0;e<d.length;e++){const e=document.querySelectorAll(".todo-box");for(let t=0;t<e.length;t++)e[t].setAttribute("id",t),e[t].setAttribute("value",t)}let e=parseInt(b.getAttribute("value")),t=e.toString();d.splice(e,1);const n=document.getElementById(t);n&&n.remove()})),b.append(a,p,m,h),v.appendChild(b),t.preventDefault()}(n,t)}))}!function(){const n=document.querySelector(".content");document.querySelector(".todo-tab").addEventListener("click",(()=>{n.replaceChildren(),n.innerHTML+='<div class="main-todo-list">\n        <div class="form-container">\n            <form autocomplete="off" class="form">\n                <input id="title" type="text" placeholder="Title" minlength="3" maxlength="40" required>\n                <input id="description" type="text" placeholder="description" minlength="3" required>\n                <input id="date" type="date" placeholder="date" required>\n                <button class="todo-add-button" type="submit">Submit</button>\n            </form>\n        </div>\n        <div class="todos"></div>';const o=document.querySelector(".todos");if(t.length>0)for(let e=0;e<t.length;e++){const n=document.createElement("div");n.setAttribute("class","todo-box"),n.innerHTML+=`<p>${t[e].title}</p>`,n.innerHTML+=`<p>${t[e].description}</p>`,n.innerHTML+=`<p>${t[e].date}</p>`,n.setAttribute("id",e),n.setAttribute("value",e);const l=document.createElement("button");l.textContent="Remove",l.setAttribute("class","remove-button"),l.setAttribute("value",e),l.addEventListener("click",(()=>{for(let e=0;e<t.length;e++){const e=document.querySelectorAll(".todo-box");for(let t=0;t<e.length;t++)e[t].setAttribute("id",t),e[t].setAttribute("value",t)}let e=parseInt(n.getAttribute("value")),o=e.toString();t.splice(e,1);const l=document.getElementById(o);l&&l.remove()})),n.append(l),o.appendChild(n)}document.querySelector(".form").addEventListener("submit",(n=>{!function(n){const o=document.querySelector("#title").value,l=document.querySelector("#description").value,r=document.querySelector("#date").value;t.push(e(o,l,r));const c=document.createTextNode(t[t.length-1].title),d=document.createTextNode(t[t.length-1].description),i=document.createTextNode(t[t.length-1].date),u=document.createElement("p"),s=document.createElement("p"),a=document.createElement("p");u.appendChild(c),s.appendChild(d),a.appendChild(i);const p=document.querySelector(".todos"),m=document.createElement("div");m.setAttribute("class","todo-box"),m.setAttribute("id",t.length-1),m.setAttribute("value",t.length-1);const v=document.createElement("button");v.textContent="Remove",v.setAttribute("class","remove-button"),v.setAttribute("value",t.length-1),v.addEventListener("click",(()=>{for(let e=0;e<t.length;e++){const e=document.querySelectorAll(".todo-box");for(let t=0;t<e.length;t++)e[t].setAttribute("id",t),e[t].setAttribute("value",t)}let e=parseInt(m.getAttribute("value")),n=e.toString();t.splice(e,1);const o=document.getElementById(n);o&&o.remove()})),m.append(u,s,a,v),p.appendChild(m),n.preventDefault()}(n)}))}))}(),document.querySelector(".project").addEventListener("submit",(e=>{!function(e){const t=document.querySelector("#project").value;n.push(function(e){const t=new class{constructor(e){this.title=e}}(e);return t}(t)),document.querySelector(".projects").innerHTML+=`<div class="project-title" value="${n.length-1}">${n[n.length-1].title}</div>`,o.push([]),function(){const e=document.querySelector(".content"),t=document.querySelectorAll(".project-title");for(let n=0;n<t.length;n++)t[n].addEventListener("click",(()=>{e.replaceChildren();let r=parseInt(t[n].getAttribute("value"));e.innerHTML+='<div class="main-todo-list">\n        <div class="form-container">\n            <form autocomplete="off" class="form">\n                <input id="title" type="text" placeholder="Title" minlength="3" maxlength="40" required>\n                <input id="description" type="text" placeholder="description" minlength="3" required>\n                <input id="date" type="date" placeholder="date" required>\n                <button class="todo-add-button" type="submit">Submit</button>\n            </form>\n        </div>\n        <div class="todos"></div>';const c=document.querySelector(".todos");if(o[r].length>0)for(let e=0;e<o[r].length;e++){const t=document.createElement("div");t.setAttribute("class","todo-box"),t.innerHTML+=`<p>${o[r][e].title}</p>`,t.innerHTML+=`<p>${o[r][e].description}</p>`,t.innerHTML+=`<p>${o[r][e].date}</p>`,t.setAttribute("id",e),t.setAttribute("value",e);const n=document.createElement("button");n.textContent="Remove",n.setAttribute("class","remove-button"),n.setAttribute("value",e),n.addEventListener("click",(()=>{for(let e=0;e<o[r].length;e++){const e=document.querySelectorAll(".todo-box");for(let t=0;t<e.length;t++)e[t].setAttribute("id",t),e[t].setAttribute("value",t)}let e=parseInt(t.getAttribute("value")),n=e.toString();uiList.splice(e,1);const l=document.getElementById(n);l&&l.remove()})),t.append(n),c.appendChild(t)}l(r)}))}(),e.preventDefault()}(e)})),function(){const e=document.querySelector(".todo-tab"),t=document.querySelector(".title"),n=document.querySelector(".project-form"),o=document.querySelector(".projects"),l=document.querySelector(".hide-show");l.addEventListener("click",(()=>{"none"==e.style.display?(e.style.display="flex",t.style.display="flex",n.style.display="flex",o.style.display="flex",l.textContent="Hide"):(e.style.display="none",t.style.display="none",n.style.display="none",o.style.display="none",l.textContent="Show")}))}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,