(()=>{"use strict";function e(e,t,n){const o=new class{constructor(e,t,n){this.title=e,this.description=t,this.date=n}}(e,t,n);return o}let t=[];let n=[],o=[];function d(t){document.querySelector(".form").addEventListener("submit",(n=>{!function(t,n){const d=document.querySelector("#title").value,c=document.querySelector("#description").value,l=document.querySelector("#date").value;let r;o[n].push(e(d,c,l)),r=o[n];const i=document.createTextNode(r[r.length-1].title),u=document.createTextNode(r[r.length-1].description),s=document.createTextNode(r[r.length-1].date),a=document.createElement("p"),p=document.createElement("p"),m=document.createElement("p");a.appendChild(i),p.appendChild(u),m.appendChild(s);const y=document.querySelector(".todos"),h=document.createElement("div");h.setAttribute("class","todo-box"),h.append(a,p,m),y.appendChild(h),t.preventDefault()}(n,t)}))}!function(){const n=document.querySelector(".content");document.querySelector(".todo-tab").addEventListener("click",(()=>{n.replaceChildren(),n.innerHTML+='<div class="main-todo-list">\n        <div class="form-container">\n            <form autocomplete="off" class="form">\n                <input id="title" type="text" placeholder="Title" minlength="3" maxlength="40" required>\n                <input id="description" type="text" placeholder="description" minlength="3" required>\n                <input id="date" type="date" placeholder="date" required>\n                <button class="todo-add-button" type="submit">Submit</button>\n            </form>\n        </div>\n        <div class="todos"></div>';const o=document.querySelector(".todos");if(t.length>0)for(let e=0;e<t.length;e++){const n=document.createElement("div");n.setAttribute("class","todo-box"),n.innerHTML+=`<p>${t[e].title}</p>`,n.innerHTML+=`<p>${t[e].description}</p>`,n.innerHTML+=`<p>${t[e].date}</p>`,o.appendChild(n)}document.querySelector(".form").addEventListener("submit",(n=>{!function(n){const o=document.querySelector("#title").value,d=document.querySelector("#description").value,c=document.querySelector("#date").value;t.push(e(o,d,c));const l=document.createTextNode(t[t.length-1].title),r=document.createTextNode(t[t.length-1].description),i=document.createTextNode(t[t.length-1].date),u=document.createElement("p"),s=document.createElement("p"),a=document.createElement("p");u.appendChild(l),s.appendChild(r),a.appendChild(i);const p=document.querySelector(".todos"),m=document.createElement("div");m.setAttribute("class","todo-box"),m.append(u,s,a),p.appendChild(m),n.preventDefault()}(n)}))}))}(),document.querySelector(".project").addEventListener("submit",(e=>{!function(e){const t=document.querySelector("#project").value;n.push(function(e){const t=new class{constructor(e){this.title=e}}(e);return t}(t)),document.querySelector(".projects").innerHTML+=`<div class="project-title" value="${n.length-1}">${n[n.length-1].title}</div>`,o.push([]),function(){const e=document.querySelector(".content"),t=document.querySelectorAll(".project-title");for(let n=0;n<t.length;n++)t[n].addEventListener("click",(()=>{e.replaceChildren();let c=parseInt(t[n].getAttribute("value"));e.innerHTML+='<div class="main-todo-list">\n        <div class="form-container">\n            <form autocomplete="off" class="form">\n                <input id="title" type="text" placeholder="Title" minlength="3" maxlength="40" required>\n                <input id="description" type="text" placeholder="description" minlength="3" required>\n                <input id="date" type="date" placeholder="date" required>\n                <button class="todo-add-button" type="submit">Submit</button>\n            </form>\n        </div>\n        <div class="todos"></div>';const l=document.querySelector(".todos");if(o[c].length>0)for(let e=0;e<o[c].length;e++){const t=document.createElement("div");t.setAttribute("class","todo-box"),t.innerHTML+=`<p>${o[c][e].title}</p>`,t.innerHTML+=`<p>${o[c][e].description}</p>`,t.innerHTML+=`<p>${o[c][e].date}</p>`,l.appendChild(t)}d(c)}))}(),e.preventDefault()}(e)})),function(){const e=document.querySelector(".todo-tab"),t=document.querySelector(".title"),n=document.querySelector(".project-form"),o=document.querySelector(".projects"),d=document.querySelector(".hide-show");d.addEventListener("click",(()=>{"none"==e.style.display?(e.style.display="flex",t.style.display="flex",n.style.display="flex",o.style.display="flex",d.textContent="Hide"):(e.style.display="none",t.style.display="none",n.style.display="none",o.style.display="none",d.textContent="Show")}))}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,